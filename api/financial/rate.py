from pandas import DataFrame

from api.exceptions import ScoreError, TermError


def _mount_data_frame(data_score: dict = None, index: str = "score") -> DataFrame:
    """
    This function will mount a DataFrame pandas to get dynamically
    rates, based on score and terms. The index from
    DataFrame is the score list, and the columns are the terms.

    You could customize it, passing a data frame as a dict, and telling the index
    from de data frame.

    :param data_score: dict
    :param index: str
    :return: DataFrame
    DataFrame

    score     6       9       12
      900   0.039   0.042   0.045
      800   0.047   0.05    0.053
      700   0.055   0.058   0.061
      600   0.064   0.066   0.069

    """
    data = data_score or {
        "score": [900, 800, 700, 600],
        6: [0.039, 0.047, 0.055, 0.064],
        9: [0.042, 0.05, 0.058, 0.066],
        12: [0.045, 0.053, 0.061, 0.069],
    }

    return DataFrame(data).set_index(index)


def _default_normalize_score(score) -> int:
    """
    It'll normalize/round score to be able to find it in data frame.
    :param score: Int
    :return: Int
    :raises: ScoreError
    """

    if not 600 <= score <= 1000:
        raise ScoreError(score)

    if 600 <= score <= 700:
        score = 600
    elif 700 <= score <= 800:
        score = 700
    elif 800 <= score <= 900:
        score = 800
    elif 900 <= score <= 1000:
        score = 900

    return score


def _check_term(term):
    if term not in (6, 9, 12):
        raise TermError(term)


def get_rate(
    score: int,
    term: int,
    data_frame_scores=None,
    normalize_score_function=None,
    terms_validator_function=None,
) -> float:
    """
    Get dynamically rate in the DataFrame generated by _mount_data_frame.

    You could mount another data frame with scores, but you'll need
    to override the normalize_score_function and the terms_validator_function
    to something more useful to your new data frame

    The default behavior, handle the score to be inside 600-1000 score, using
    as reference the scores 600 - 700 - 800 - 900, how theses values are indexes
    in the default data frame.

    The terms_validator_function you check if the terms passed as argument
    is valid.

    Data frame build example:
    it -> {
        "score": [900, 800, 700, 600],
        6: [0.039, 0.047, 0.055, 0.064],
        9: [0.042, 0.05, 0.058, 0.066],
        12: [0.045, 0.053, 0.061, 0.069],
    }

    yields ->
    score     6       9       12
      900   0.039   0.042   0.045
      800   0.047   0.05    0.053
      700   0.055   0.058   0.061
      600   0.064   0.066   0.069

    :param score: Int
    :param term: Int
    :param data_frame_scores: Dict
    :param normalize_score_function: callback Function used to normalize score
    :param terms_validator_function: callback Function used to check terms
    :return: Float
    :raises: ScoreError, TermError
    """
    normalize_score = normalize_score_function or _default_normalize_score
    score = normalize_score(score)

    term_checker = terms_validator_function or _check_term
    term_checker(term)

    df = _mount_data_frame(data_frame_scores)
    return df.loc[score, term]
